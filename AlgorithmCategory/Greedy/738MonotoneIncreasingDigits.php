<?php

# 738. 单调递增的数字 https://leetcode.cn/problems/monotone-increasing-digits/description/

/**
 * 整体思路:
 * 要找到小于或等于给定整数 n 的最大单调递增数字，我们可以从高位到低位逐位检查数字是否满足单调递增的条件。
 * 如果遇到某一位数字比它前一位小，说明需要对数字进行调整。调整的策略是将前一位数字减 1，然后把这一位及其后面的所有数字都变为 9，
 * 同时为了保证结果最大，可能还需要对前面的数字进一步调整，以确保整体仍然是单调递增的。
 * 调整的策略是将前一位数字减 1 的原因:
 * 将前一位数字减 1 是为了保证得到的结果是小于或等于给定整数 n 的最大单调递增数字，下面详细解释这样做的原因。
 * 1. 保证结果小于或等于给定整数
 * 当我们从高位到低位逐位检查数字时，如果遇到某一位数字比它前一位小，说明当前的数字序列不是单调递增的。为了得到一个小于或等于原数字的数，我们需要对数字进行调整。
 * 假设我们有一个数字 n，在某一位上出现了降序，比如 n = 332，从左到右看，第三位数字 2 小于第二位数字 3，这就不满足单调递增的条件。
 * 如果不进行调整，就无法得到单调递增的数字。而把前一位数字（这里是第二位的 3）减 1，变成 2，得到的新数字肯定小于原数字，因为高位数字变小了，这样就保证了结果是小于或等于原数字的。
 * 2. 保证结果是最大的单调递增数字
 * 在将前一位数字减 1 之后，我们把这一位及其后面的所有数字都变为 9。这是因为在满足小于或等于原数字的前提下，把后面的数字都变为 9 可以使得得到的数字尽可能大。
 * 还是以 n = 332 为例，当我们把第二位数字 3 减 1 变成 2 后，将第三位数字以及后续可能的数字都变为 9，得到 299。
 * 如果我们不把后面的数字变为 9，比如变成 222，虽然也是单调递增且小于原数字，但显然 299 比 222 更大，所以把后面的数字变为 9 能保证得到的是满足条件的最大数字。
 * 3. 可能需要对前面的数字进一步调整
 * 有时候，将前一位数字减 1 之后，可能会破坏前面数字的单调递增关系，所以需要对前面的数字进一步调整。
 * 例如，对于数字 n = 12343，当检查到第五位数字 3 小于第四位数字 4 时，将第四位数字 4 减 1 变成 3，得到
 * 12333。但此时，这个调整可能会影响前面数字的单调性，不过在这个例子中没有影响。如果是更复杂的情况，就可能需要继续往前检查和调整，以确保整个数字序列都是单调递增的。
 * 4. 更复杂的受影响例子 n = 332
 * 4.1: 初始字符数组为 ['3', '3', '2']。
 * 4.2: 当检查到第三位数字 2 小于第二位数字 3 时，将第二位数字 3 减 1 变为 2，数组变为 ['3', '2', '2']。
 * 4.3: 此时，我们发现第二位数字 2 小于第一位数字 3，这就破坏了前面数字的单调性，所以需要进一步调整。
 * 4.4: 继续将第一位数字 3 减 1 变为 2，数组变为 ['2', '2', '2']。
 * 4.5: 此时前面数字的单调性得到恢复，然后将第三位及后面（这里只有第三位）的数字都置为 9，最终得到 299。
 * @author niujunqing
 */
class MonotoneIncreasingDigitsSolution
{
    /**
     * @param Integer $n
     * @return Integer
     */
    function monotoneIncreasingDigits(int $n): int
    {
        // 转为字符数组
        $nStr = str_split(strval($n));
        // 获取数组长度
        $sCount = count($nStr);

        for ($i = 1; $i < $sCount; $i++) {
            // 当前元素小于前一个元素, 说明有降序, 需要调整
            if ($nStr[$i] < $nStr[$i - 1]) {
                // 找到 i 之后, 把 i - 1 位置的数字减 1, 因为 i - 1 位置上的数字变化了, 要检查 i - 1 之前的数字是不是小于 i - 1
                // 所以需要依次向前看
                while ($i > 0 && $nStr[$i] < $nStr[$i - 1]) {
                    $nStr[$i - 1] = chr(ord($nStr[$i - 1]) - 1);
                    $i--;
                }

                // 将 i 后面的数字都置为 9
                for ($j = $i + 1; $j < $sCount; $j++) {
                    $nStr[$j] = '9';
                }
                break;  // 找到第一个需要调整的位置后就退出循环
            }
        }

        // 处理特殊情况：如果第一个数字减为 0，需要去掉前面的 0
        while ($nStr[0] === '0') {
            array_shift($nStr);
        }

        return intval(implode('', $nStr));
    }
}

$questions = [
    12056,
    1234,
    10,
    332,
    20,
];
$svc = new MonotoneIncreasingDigitsSolution();
foreach ($questions as $question) {
    echo $svc->monotoneIncreasingDigits($question) . PHP_EOL;
}